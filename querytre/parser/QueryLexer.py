# Generated from Query.g4 by ANTLR 4.7.1
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2\37")
        buf.write("\u00a9\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3")
        buf.write("\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3")
        buf.write("\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3")
        buf.write("\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25")
        buf.write("\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\7\31w\n")
        buf.write("\31\f\31\16\31z\13\31\3\32\3\32\3\33\3\33\3\33\6\33\u0081")
        buf.write("\n\33\r\33\16\33\u0082\3\33\3\33\5\33\u0087\n\33\3\34")
        buf.write("\6\34\u008a\n\34\r\34\16\34\u008b\3\34\3\34\6\34\u0090")
        buf.write("\n\34\r\34\16\34\u0091\3\35\6\35\u0095\n\35\r\35\16\35")
        buf.write("\u0096\3\35\3\35\6\35\u009b\n\35\r\35\16\35\u009c\3\36")
        buf.write("\6\36\u00a0\n\36\r\36\16\36\u00a1\3\36\3\36\3\37\3\37")
        buf.write("\3 \3 \2\2!\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25")
        buf.write("\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+")
        buf.write("\27-\30/\31\61\32\63\33\65\34\67\359\36;\37=\2?\2\3\2")
        buf.write("\5\5\2C\\aac|\6\2\62;C\\aac|\5\2\13\f\17\17\"\"\2\u00b0")
        buf.write("\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13")
        buf.write("\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3")
        buf.write("\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2")
        buf.write("\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2")
        buf.write("%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2")
        buf.write("\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67")
        buf.write("\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\3A\3\2\2\2\5F\3\2\2\2\7")
        buf.write("I\3\2\2\2\tL\3\2\2\2\13N\3\2\2\2\rP\3\2\2\2\17R\3\2\2")
        buf.write("\2\21T\3\2\2\2\23V\3\2\2\2\25X\3\2\2\2\27Z\3\2\2\2\31")
        buf.write("\\\3\2\2\2\33^\3\2\2\2\35`\3\2\2\2\37b\3\2\2\2!d\3\2\2")
        buf.write("\2#f\3\2\2\2%h\3\2\2\2\'j\3\2\2\2)l\3\2\2\2+n\3\2\2\2")
        buf.write("-p\3\2\2\2/r\3\2\2\2\61t\3\2\2\2\63{\3\2\2\2\65\u0086")
        buf.write("\3\2\2\2\67\u0089\3\2\2\29\u0094\3\2\2\2;\u009f\3\2\2")
        buf.write("\2=\u00a5\3\2\2\2?\u00a7\3\2\2\2AB\7V\2\2BC\7t\2\2CD\7")
        buf.write("w\2\2DE\7g\2\2E\4\3\2\2\2FG\7>\2\2GH\7<\2\2H\6\3\2\2\2")
        buf.write("IJ\7<\2\2JK\7@\2\2K\b\3\2\2\2LM\7,\2\2M\n\3\2\2\2NO\7")
        buf.write("-\2\2O\f\3\2\2\2PQ\7A\2\2Q\16\3\2\2\2RS\7\u0080\2\2S\20")
        buf.write("\3\2\2\2TU\7]\2\2U\22\3\2\2\2VW\7<\2\2W\24\3\2\2\2XY\7")
        buf.write("_\2\2Y\26\3\2\2\2Z[\7=\2\2[\30\3\2\2\2\\]\7~\2\2]\32\3")
        buf.write("\2\2\2^_\7(\2\2_\34\3\2\2\2`a\7\61\2\2a\36\3\2\2\2bc\7")
        buf.write(">\2\2c \3\2\2\2de\7C\2\2e\"\3\2\2\2fg\7D\2\2g$\3\2\2\2")
        buf.write("hi\7G\2\2i&\3\2\2\2jk\7k\2\2k(\3\2\2\2lm\7@\2\2m*\3\2")
        buf.write("\2\2no\7*\2\2o,\3\2\2\2pq\7+\2\2q.\3\2\2\2rs\7.\2\2s\60")
        buf.write("\3\2\2\2tx\t\2\2\2uw\t\3\2\2vu\3\2\2\2wz\3\2\2\2xv\3\2")
        buf.write("\2\2xy\3\2\2\2y\62\3\2\2\2zx\3\2\2\2{|\t\2\2\2|\64\3\2")
        buf.write("\2\2}\u0087\5=\37\2~\u0080\5? \2\177\u0081\5=\37\2\u0080")
        buf.write("\177\3\2\2\2\u0081\u0082\3\2\2\2\u0082\u0080\3\2\2\2\u0082")
        buf.write("\u0083\3\2\2\2\u0083\u0087\3\2\2\2\u0084\u0087\5\67\34")
        buf.write("\2\u0085\u0087\59\35\2\u0086}\3\2\2\2\u0086~\3\2\2\2\u0086")
        buf.write("\u0084\3\2\2\2\u0086\u0085\3\2\2\2\u0087\66\3\2\2\2\u0088")
        buf.write("\u008a\5=\37\2\u0089\u0088\3\2\2\2\u008a\u008b\3\2\2\2")
        buf.write("\u008b\u0089\3\2\2\2\u008b\u008c\3\2\2\2\u008c\u008d\3")
        buf.write("\2\2\2\u008d\u008f\7\60\2\2\u008e\u0090\5=\37\2\u008f")
        buf.write("\u008e\3\2\2\2\u0090\u0091\3\2\2\2\u0091\u008f\3\2\2\2")
        buf.write("\u0091\u0092\3\2\2\2\u00928\3\2\2\2\u0093\u0095\5=\37")
        buf.write("\2\u0094\u0093\3\2\2\2\u0095\u0096\3\2\2\2\u0096\u0094")
        buf.write("\3\2\2\2\u0096\u0097\3\2\2\2\u0097\u0098\3\2\2\2\u0098")
        buf.write("\u009a\7\61\2\2\u0099\u009b\5=\37\2\u009a\u0099\3\2\2")
        buf.write("\2\u009b\u009c\3\2\2\2\u009c\u009a\3\2\2\2\u009c\u009d")
        buf.write("\3\2\2\2\u009d:\3\2\2\2\u009e\u00a0\t\4\2\2\u009f\u009e")
        buf.write("\3\2\2\2\u00a0\u00a1\3\2\2\2\u00a1\u009f\3\2\2\2\u00a1")
        buf.write("\u00a2\3\2\2\2\u00a2\u00a3\3\2\2\2\u00a3\u00a4\b\36\2")
        buf.write("\2\u00a4<\3\2\2\2\u00a5\u00a6\4\62;\2\u00a6>\3\2\2\2\u00a7")
        buf.write("\u00a8\4\63;\2\u00a8@\3\2\2\2\13\2x\u0082\u0086\u008b")
        buf.write("\u0091\u0096\u009c\u00a1\3\2\3\2")
        return buf.getvalue()


class QueryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    IDENTIFIER = 24
    LETTER = 25
    NUMBER = 26
    FLOAT = 27
    RATIONAL = 28
    WS = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'True'", "'<:'", "':>'", "'*'", "'+'", "'?'", "'~'", "'['", 
            "':'", "']'", "';'", "'|'", "'&'", "'/'", "'<'", "'A'", "'B'", 
            "'E'", "'i'", "'>'", "'('", "')'", "','" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "LETTER", "NUMBER", "FLOAT", "RATIONAL", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "IDENTIFIER", "LETTER", "NUMBER", 
                  "FLOAT", "RATIONAL", "WS", "DIGIT", "DIGIT_NOT_ZERO" ]

    grammarFileName = "Query.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


